name: Comprehensive Testing

on:
  push:
    branches: [main, openai, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false --testPathPattern="__tests__"

      - name: Run component tests
        run: npm test -- --watchAll=false --testPathPattern="components"

      - name: Run integration tests
        run: npm run test:integration
        continue-on-error: true

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          directory: ./client/coverage
          flags: frontend
          name: frontend-coverage

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    strategy:
      matrix:
        node-version: [18, 20]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: smart_recipes_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          PGPASSWORD=test_password psql -h localhost -U test_user -d smart_recipes_test -f ../database/schema.sql
        env:
          PGPASSWORD: test_password

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/smart_recipes_test
          JWT_SECRET: test-jwt-secret-for-ci

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/smart_recipes_test
          JWT_SECRET: test-jwt-secret-for-ci
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        with:
          directory: ./server/coverage
          flags: backend
          name: backend-coverage

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: smart_recipes_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies (Frontend)
        run: cd client && npm ci

      - name: Install dependencies (Backend)
        run: cd server && npm ci

      - name: Setup test database
        run: |
          PGPASSWORD=test_password psql -h localhost -U test_user -d smart_recipes_test -f database/schema.sql
          PGPASSWORD=test_password psql -h localhost -U test_user -d smart_recipes_test -f database/enhanced-data.sql
        env:
          PGPASSWORD: test_password

      - name: Start backend server
        run: cd server && npm run start:tsx &
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/smart_recipes_test
          JWT_SECRET: test-jwt-secret-for-ci
          PORT: 3001
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Wait for backend
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'

      - name: Build frontend
        run: cd client && npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001/api

      - name: Start frontend server
        run: cd client && npm start &
        env:
          PORT: 3000

      - name: Wait for frontend
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Install Playwright
        run: cd client && npx playwright install --with-deps

      - name: Run E2E tests
        run: cd client && npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:3001/api

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: client/test-results/
          retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/login
            http://localhost:3000/register
          configPath: './client/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit (Frontend)
        run: cd client && npm audit --audit-level moderate
        continue-on-error: true

      - name: Run npm audit (Backend)
        run: cd server && npm audit --audit-level moderate
        continue-on-error: true 